// Code generated by protoc-gen-go.
// source: gokuproxy.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	gokuproxy.proto

It has these top-level messages:
	Error
	AddGroupRequest
	AddGroupReply
	DelGroupRequest
	DelGroupReply
	AssignSlotsRequest
	AssignSlotsReply
	InsertRequest
	InsertReply
	DeleteRequest
	DeleteReply
	SelectRequest
	Element
	SelectReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Error struct {
	Code    int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Error) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AddGroupRequest struct {
	GroupId int64    `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Servers []string `protobuf:"bytes,2,rep,name=servers" json:"servers,omitempty"`
}

func (m *AddGroupRequest) Reset()                    { *m = AddGroupRequest{} }
func (m *AddGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*AddGroupRequest) ProtoMessage()               {}
func (*AddGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddGroupRequest) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *AddGroupRequest) GetServers() []string {
	if m != nil {
		return m.Servers
	}
	return nil
}

type AddGroupReply struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *AddGroupReply) Reset()                    { *m = AddGroupReply{} }
func (m *AddGroupReply) String() string            { return proto.CompactTextString(m) }
func (*AddGroupReply) ProtoMessage()               {}
func (*AddGroupReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddGroupReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type DelGroupRequest struct {
	GroupId int64 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *DelGroupRequest) Reset()                    { *m = DelGroupRequest{} }
func (m *DelGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*DelGroupRequest) ProtoMessage()               {}
func (*DelGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DelGroupRequest) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type DelGroupReply struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *DelGroupReply) Reset()                    { *m = DelGroupReply{} }
func (m *DelGroupReply) String() string            { return proto.CompactTextString(m) }
func (*DelGroupReply) ProtoMessage()               {}
func (*DelGroupReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DelGroupReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type AssignSlotsRequest struct {
	ToGroupId   int64 `protobuf:"varint,1,opt,name=to_group_id,json=toGroupId" json:"to_group_id,omitempty"`
	StartSlotId int64 `protobuf:"varint,2,opt,name=start_slot_id,json=startSlotId" json:"start_slot_id,omitempty"`
	StopSlotId  int64 `protobuf:"varint,3,opt,name=stop_slot_id,json=stopSlotId" json:"stop_slot_id,omitempty"`
}

func (m *AssignSlotsRequest) Reset()                    { *m = AssignSlotsRequest{} }
func (m *AssignSlotsRequest) String() string            { return proto.CompactTextString(m) }
func (*AssignSlotsRequest) ProtoMessage()               {}
func (*AssignSlotsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AssignSlotsRequest) GetToGroupId() int64 {
	if m != nil {
		return m.ToGroupId
	}
	return 0
}

func (m *AssignSlotsRequest) GetStartSlotId() int64 {
	if m != nil {
		return m.StartSlotId
	}
	return 0
}

func (m *AssignSlotsRequest) GetStopSlotId() int64 {
	if m != nil {
		return m.StopSlotId
	}
	return 0
}

type AssignSlotsReply struct {
	Error *Error `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *AssignSlotsReply) Reset()                    { *m = AssignSlotsReply{} }
func (m *AssignSlotsReply) String() string            { return proto.CompactTextString(m) }
func (*AssignSlotsReply) ProtoMessage()               {}
func (*AssignSlotsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AssignSlotsReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type InsertRequest struct {
	Key         string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Member      string `protobuf:"bytes,2,opt,name=member" json:"member,omitempty"`
	TimestampNs int64  `protobuf:"varint,3,opt,name=timestamp_ns,json=timestampNs" json:"timestamp_ns,omitempty"`
	TtlNs       int64  `protobuf:"varint,4,opt,name=ttl_ns,json=ttlNs" json:"ttl_ns,omitempty"`
}

func (m *InsertRequest) Reset()                    { *m = InsertRequest{} }
func (m *InsertRequest) String() string            { return proto.CompactTextString(m) }
func (*InsertRequest) ProtoMessage()               {}
func (*InsertRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *InsertRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *InsertRequest) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

func (m *InsertRequest) GetTimestampNs() int64 {
	if m != nil {
		return m.TimestampNs
	}
	return 0
}

func (m *InsertRequest) GetTtlNs() int64 {
	if m != nil {
		return m.TtlNs
	}
	return 0
}

type InsertReply struct {
	Updated bool   `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
	Error   *Error `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *InsertReply) Reset()                    { *m = InsertReply{} }
func (m *InsertReply) String() string            { return proto.CompactTextString(m) }
func (*InsertReply) ProtoMessage()               {}
func (*InsertReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *InsertReply) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

func (m *InsertReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type DeleteRequest struct {
	Key         string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Member      string `protobuf:"bytes,2,opt,name=member" json:"member,omitempty"`
	TimestampNs int64  `protobuf:"varint,3,opt,name=timestamp_ns,json=timestampNs" json:"timestamp_ns,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DeleteRequest) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

func (m *DeleteRequest) GetTimestampNs() int64 {
	if m != nil {
		return m.TimestampNs
	}
	return 0
}

type DeleteReply struct {
	Deleted bool   `protobuf:"varint,1,opt,name=deleted" json:"deleted,omitempty"`
	Error   *Error `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *DeleteReply) Reset()                    { *m = DeleteReply{} }
func (m *DeleteReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteReply) ProtoMessage()               {}
func (*DeleteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteReply) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *DeleteReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type SelectRequest struct {
	Key         string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	TimestampNs int64  `protobuf:"varint,2,opt,name=timestamp_ns,json=timestampNs" json:"timestamp_ns,omitempty"`
}

func (m *SelectRequest) Reset()                    { *m = SelectRequest{} }
func (m *SelectRequest) String() string            { return proto.CompactTextString(m) }
func (*SelectRequest) ProtoMessage()               {}
func (*SelectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SelectRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SelectRequest) GetTimestampNs() int64 {
	if m != nil {
		return m.TimestampNs
	}
	return 0
}

type Element struct {
	Member      string `protobuf:"bytes,3,opt,name=member" json:"member,omitempty"`
	TimestampNs int64  `protobuf:"varint,4,opt,name=timestamp_ns,json=timestampNs" json:"timestamp_ns,omitempty"`
	TtlNs       int64  `protobuf:"varint,5,opt,name=ttl_ns,json=ttlNs" json:"ttl_ns,omitempty"`
}

func (m *Element) Reset()                    { *m = Element{} }
func (m *Element) String() string            { return proto.CompactTextString(m) }
func (*Element) ProtoMessage()               {}
func (*Element) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Element) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

func (m *Element) GetTimestampNs() int64 {
	if m != nil {
		return m.TimestampNs
	}
	return 0
}

func (m *Element) GetTtlNs() int64 {
	if m != nil {
		return m.TtlNs
	}
	return 0
}

type SelectReply struct {
	Elements []*Element `protobuf:"bytes,1,rep,name=elements" json:"elements,omitempty"`
	Error    *Error     `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *SelectReply) Reset()                    { *m = SelectReply{} }
func (m *SelectReply) String() string            { return proto.CompactTextString(m) }
func (*SelectReply) ProtoMessage()               {}
func (*SelectReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SelectReply) GetElements() []*Element {
	if m != nil {
		return m.Elements
	}
	return nil
}

func (m *SelectReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*Error)(nil), "pb.Error")
	proto.RegisterType((*AddGroupRequest)(nil), "pb.AddGroupRequest")
	proto.RegisterType((*AddGroupReply)(nil), "pb.AddGroupReply")
	proto.RegisterType((*DelGroupRequest)(nil), "pb.DelGroupRequest")
	proto.RegisterType((*DelGroupReply)(nil), "pb.DelGroupReply")
	proto.RegisterType((*AssignSlotsRequest)(nil), "pb.AssignSlotsRequest")
	proto.RegisterType((*AssignSlotsReply)(nil), "pb.AssignSlotsReply")
	proto.RegisterType((*InsertRequest)(nil), "pb.InsertRequest")
	proto.RegisterType((*InsertReply)(nil), "pb.InsertReply")
	proto.RegisterType((*DeleteRequest)(nil), "pb.DeleteRequest")
	proto.RegisterType((*DeleteReply)(nil), "pb.DeleteReply")
	proto.RegisterType((*SelectRequest)(nil), "pb.SelectRequest")
	proto.RegisterType((*Element)(nil), "pb.Element")
	proto.RegisterType((*SelectReply)(nil), "pb.SelectReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for GokuProxy service

type GokuProxyClient interface {
	AddGroup(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*AddGroupReply, error)
	DelGroup(ctx context.Context, in *DelGroupRequest, opts ...grpc.CallOption) (*DelGroupReply, error)
	AssignSlots(ctx context.Context, in *AssignSlotsRequest, opts ...grpc.CallOption) (*AssignSlotsReply, error)
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertReply, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error)
	Select(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectReply, error)
}

type gokuProxyClient struct {
	cc *grpc.ClientConn
}

func NewGokuProxyClient(cc *grpc.ClientConn) GokuProxyClient {
	return &gokuProxyClient{cc}
}

func (c *gokuProxyClient) AddGroup(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*AddGroupReply, error) {
	out := new(AddGroupReply)
	err := grpc.Invoke(ctx, "/pb.GokuProxy/AddGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gokuProxyClient) DelGroup(ctx context.Context, in *DelGroupRequest, opts ...grpc.CallOption) (*DelGroupReply, error) {
	out := new(DelGroupReply)
	err := grpc.Invoke(ctx, "/pb.GokuProxy/DelGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gokuProxyClient) AssignSlots(ctx context.Context, in *AssignSlotsRequest, opts ...grpc.CallOption) (*AssignSlotsReply, error) {
	out := new(AssignSlotsReply)
	err := grpc.Invoke(ctx, "/pb.GokuProxy/AssignSlots", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gokuProxyClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertReply, error) {
	out := new(InsertReply)
	err := grpc.Invoke(ctx, "/pb.GokuProxy/Insert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gokuProxyClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error) {
	out := new(DeleteReply)
	err := grpc.Invoke(ctx, "/pb.GokuProxy/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gokuProxyClient) Select(ctx context.Context, in *SelectRequest, opts ...grpc.CallOption) (*SelectReply, error) {
	out := new(SelectReply)
	err := grpc.Invoke(ctx, "/pb.GokuProxy/Select", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GokuProxy service

type GokuProxyServer interface {
	AddGroup(context.Context, *AddGroupRequest) (*AddGroupReply, error)
	DelGroup(context.Context, *DelGroupRequest) (*DelGroupReply, error)
	AssignSlots(context.Context, *AssignSlotsRequest) (*AssignSlotsReply, error)
	Insert(context.Context, *InsertRequest) (*InsertReply, error)
	Delete(context.Context, *DeleteRequest) (*DeleteReply, error)
	Select(context.Context, *SelectRequest) (*SelectReply, error)
}

func RegisterGokuProxyServer(s *grpc.Server, srv GokuProxyServer) {
	s.RegisterService(&_GokuProxy_serviceDesc, srv)
}

func _GokuProxy_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GokuProxyServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GokuProxy/AddGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GokuProxyServer).AddGroup(ctx, req.(*AddGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GokuProxy_DelGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GokuProxyServer).DelGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GokuProxy/DelGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GokuProxyServer).DelGroup(ctx, req.(*DelGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GokuProxy_AssignSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignSlotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GokuProxyServer).AssignSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GokuProxy/AssignSlots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GokuProxyServer).AssignSlots(ctx, req.(*AssignSlotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GokuProxy_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GokuProxyServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GokuProxy/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GokuProxyServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GokuProxy_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GokuProxyServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GokuProxy/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GokuProxyServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GokuProxy_Select_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GokuProxyServer).Select(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GokuProxy/Select",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GokuProxyServer).Select(ctx, req.(*SelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GokuProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GokuProxy",
	HandlerType: (*GokuProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGroup",
			Handler:    _GokuProxy_AddGroup_Handler,
		},
		{
			MethodName: "DelGroup",
			Handler:    _GokuProxy_DelGroup_Handler,
		},
		{
			MethodName: "AssignSlots",
			Handler:    _GokuProxy_AssignSlots_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _GokuProxy_Insert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GokuProxy_Delete_Handler,
		},
		{
			MethodName: "Select",
			Handler:    _GokuProxy_Select_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gokuproxy.proto",
}

func init() { proto.RegisterFile("gokuproxy.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 550 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x6d, 0x93, 0x7e, 0x4e, 0xb6, 0xea, 0x62, 0x60, 0x15, 0x7a, 0x80, 0xe2, 0x0b, 0x3d, 0xa0,
	0x0a, 0x75, 0xe1, 0xc8, 0x61, 0xd1, 0x2e, 0xa5, 0x97, 0x15, 0xca, 0x1e, 0x90, 0x00, 0xa9, 0x6a,
	0x37, 0xa3, 0xaa, 0x6a, 0x52, 0x1b, 0xdb, 0x45, 0x94, 0x1f, 0xc8, 0xef, 0x42, 0xb6, 0xe3, 0x34,
	0x69, 0x45, 0xb7, 0x17, 0x6e, 0x9e, 0xf1, 0x9b, 0x37, 0x6f, 0x3c, 0x33, 0x86, 0xee, 0x82, 0xad,
	0x36, 0x5c, 0xb0, 0x5f, 0xdb, 0x21, 0x17, 0x4c, 0x31, 0xe2, 0xf1, 0x39, 0x7d, 0x07, 0xf5, 0x1b,
	0x21, 0x98, 0x20, 0x04, 0x6a, 0xf7, 0x2c, 0xc6, 0xb0, 0xda, 0xaf, 0x0e, 0xfc, 0xc8, 0x9c, 0x49,
	0x08, 0xcd, 0x14, 0xa5, 0x9c, 0x2d, 0x30, 0xf4, 0xfa, 0xd5, 0x41, 0x3b, 0x72, 0x26, 0xfd, 0x08,
	0xdd, 0xab, 0x38, 0x1e, 0x0b, 0xb6, 0xe1, 0x11, 0xfe, 0xd8, 0xa0, 0x54, 0xe4, 0x19, 0xb4, 0x16,
	0xda, 0x9e, 0x2e, 0xe3, 0x8c, 0xa4, 0x69, 0xec, 0x49, 0xac, 0x79, 0x24, 0x8a, 0x9f, 0x28, 0x64,
	0xe8, 0xf5, 0x7d, 0xcd, 0x93, 0x99, 0xf4, 0x0d, 0x74, 0x76, 0x3c, 0x3c, 0xd9, 0x92, 0x17, 0x50,
	0x47, 0xad, 0xc7, 0x50, 0x04, 0xa3, 0xf6, 0x90, 0xcf, 0x87, 0x46, 0x60, 0x64, 0xfd, 0xf4, 0x35,
	0x74, 0xaf, 0x31, 0x39, 0x31, 0xb3, 0xe6, 0xdf, 0xa1, 0x4f, 0xe2, 0xff, 0x0d, 0xe4, 0x4a, 0xca,
	0xe5, 0x62, 0x7d, 0x97, 0x30, 0x25, 0x5d, 0x8a, 0xe7, 0x10, 0x28, 0x36, 0xdd, 0xcb, 0xd2, 0x56,
	0x6c, 0x9c, 0x55, 0x48, 0xa1, 0x23, 0xd5, 0x4c, 0xa8, 0xa9, 0x4c, 0x98, 0xd2, 0x08, 0xcf, 0x20,
	0x02, 0xe3, 0xd4, 0x4c, 0x93, 0x98, 0xf4, 0xe1, 0x4c, 0x2a, 0xc6, 0x73, 0x88, 0x6f, 0x20, 0xa0,
	0x7d, 0x16, 0x41, 0x2f, 0xe1, 0xbc, 0x94, 0xfb, 0x24, 0xc1, 0x12, 0x3a, 0x93, 0xb5, 0x44, 0xa1,
	0x9c, 0xd6, 0x73, 0xf0, 0x57, 0xb8, 0x35, 0xf8, 0x76, 0xa4, 0x8f, 0xe4, 0x02, 0x1a, 0x29, 0xa6,
	0x73, 0x14, 0x59, 0x1b, 0x33, 0x8b, 0xbc, 0x84, 0x33, 0xb5, 0x4c, 0x51, 0xaa, 0x59, 0xca, 0xa7,
	0x6b, 0x99, 0x29, 0x0a, 0x72, 0xdf, 0xad, 0x24, 0x4f, 0xa1, 0xa1, 0x54, 0xa2, 0x2f, 0x6b, 0xe6,
	0xb2, 0xae, 0x54, 0x72, 0x2b, 0xe9, 0x27, 0x08, 0x5c, 0x52, 0x2d, 0x32, 0x84, 0xe6, 0x86, 0xc7,
	0x33, 0x85, 0xf6, 0x69, 0x5a, 0x91, 0x33, 0x77, 0xf2, 0xbd, 0x7f, 0xc8, 0xff, 0x6e, 0x3a, 0x84,
	0x0a, 0xff, 0x87, 0x7c, 0xad, 0xd3, 0xb1, 0x67, 0x3a, 0x63, 0x63, 0xe6, 0x3a, 0x33, 0xf3, 0x61,
	0x9d, 0xd7, 0xd0, 0xb9, 0xc3, 0x04, 0xef, 0x8f, 0x3c, 0xf3, 0xbe, 0x1e, 0xef, 0x50, 0xcf, 0x37,
	0x68, 0xde, 0x24, 0x98, 0xe2, 0x5a, 0x15, 0xaa, 0xf2, 0x8f, 0x56, 0x55, 0x3b, 0xd6, 0x94, 0x7a,
	0xb1, 0x29, 0x5f, 0x20, 0x70, 0x12, 0x75, 0xb1, 0xaf, 0xa0, 0x85, 0x36, 0x97, 0x0c, 0xab, 0x7d,
	0x7f, 0x10, 0x8c, 0x02, 0x53, 0x95, 0xf5, 0x45, 0xf9, 0xe5, 0x83, 0xb5, 0x8f, 0xfe, 0x78, 0xd0,
	0x1e, 0xb3, 0xd5, 0xe6, 0xb3, 0xfe, 0x3c, 0xc8, 0x5b, 0x68, 0xb9, 0x9d, 0x25, 0x8f, 0x35, 0x76,
	0xef, 0x27, 0xe8, 0x3d, 0x2a, 0x3b, 0x79, 0xb2, 0xa5, 0x15, 0x1d, 0xe5, 0x36, 0xd1, 0x46, 0xed,
	0x6d, 0xb1, 0x8d, 0x2a, 0x2d, 0x2b, 0xad, 0x90, 0xf7, 0x10, 0x14, 0x36, 0x82, 0x5c, 0x18, 0xe6,
	0x83, 0xf5, 0xec, 0x3d, 0x39, 0xf0, 0xdb, 0xf0, 0x21, 0x34, 0xec, 0x98, 0x12, 0xc3, 0x5e, 0xda,
	0x93, 0x5e, 0xb7, 0xe8, 0xca, 0xf1, 0x76, 0x5c, 0x88, 0x53, 0xb3, 0x1b, 0x4c, 0x8b, 0x2f, 0x4c,
	0x93, 0xc5, 0xdb, 0x17, 0xb7, 0xf8, 0xd2, 0x80, 0x58, 0x7c, 0xa1, 0x21, 0xb4, 0xf2, 0xa1, 0xf6,
	0xd5, 0xe3, 0xf3, 0x79, 0xc3, 0x7c, 0xbf, 0x97, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x64, 0x53,
	0x04, 0x4a, 0x91, 0x05, 0x00, 0x00,
}
